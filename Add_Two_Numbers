/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode answer = new ListNode();
        ListNode head = answer;
        int overflow = 0;
        boolean isFinishedFirst = false;
        boolean isFinishedSecond = false;
        while(true){
            int sum = 0;
            if(isFinishedSecond) {
                sum = l1.val;
            }
            else if(isFinishedFirst){
                sum = l2.val;
            }
            else {
                sum = l1.val + l2.val;
            }
            if(overflow == 1) {
                sum++;
                overflow = 0;
            }
            if(sum > 9){
                overflow = 1;
                sum -= 10;
            }
            answer.val = sum;
            if(l1.next == null && l2.next == null) break;
            answer.next = new ListNode();
            answer = answer.next;
            if(l1.next == null){
                isFinishedFirst = true;
            }
            else {
                l1 = l1.next;
            }
            if(l2.next == null){
                isFinishedSecond = true;
            }
            else {
                l2 = l2.next;
            }
            if(l1 == null && l2 == null) break;
        }
        if(overflow == 1){
            ListNode newNode = new ListNode(overflow);
            ListNode traverse = head;
            while(traverse.next != null){
                traverse = traverse.next;
            }
            traverse.next = newNode;
            newNode.next = null;
        } 
        
        return head;
    }
}
